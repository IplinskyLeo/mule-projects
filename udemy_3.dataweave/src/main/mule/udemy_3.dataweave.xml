<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="dataweave_basics" doc:id="28083305-b41d-433c-83b6-09ff747a4382" >
		<ee:transform doc:name="Concatenate 2 Strings" doc:id="605ba991-5e15-4bbd-ba0a-c1a42bb6bb68" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0


output application/json
---
{
	"newString": ("hello "++"world")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="JSON to XML" doc:id="a0b5cd2a-1d0b-449f-89c5-b21f5713ef3f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
  "newString": "hello world"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Criando Vars" doc:id="cb89c427-e7e0-4157-90da-65758e533c77" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myVar = {
  "newString": "hello world"
}

output application/java
---
myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="DW Function" doc:id="e23f346c-cbac-4c3c-a333-2016c17765d6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var teste = "apis"
var myVar ={
	"sum": sum([3,8,9,2,1,2]),
	"avg": avg([100,200,400,800]),
	"even": isEven(1),
	"odd": isOdd(1),
	"uppercase": upper("Mulesoft "++ teste),
	"timestamp": now()
}

output application/json
---

myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveFiles" doc:id="8e73b50c-056c-458f-a03e-269895b84f73" >
		<ee:transform doc:name="Read Content File from Classpath" doc:id="dab17b7e-d7c0-46ea-a3ab-6b1ecb75a32c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---

readUrl("classpath://peopleName.json")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Create Metadata Type and Use as a Payload" doc:id="4d171bb7-2e21-4bbe-8cdc-0654d1722643" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveObjectArray" doc:id="52369682-9921-4184-ba96-e32c04dcf353" >
		<ee:transform doc:name="Map from Array to Object" doc:id="b94685ab-091a-466d-890a-b4d9f74d4517" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = ["Mulesoft", "Course", "Fundamentals"]

output application/json
---

customArray map ((item, index) ->
	index: item ++ "_" ++ index
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Pluck Objects from an Object to an Array" doc:id="536aedf1-14e9-478b-b483-9675496c0292" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"0": "Mulesoft",
	"1": "Course",
	"2": "Fundamentals"
}

output application/json
---

customObj pluck ((value) -> 
	value
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Filter an Array and Return Only Matching Items" doc:id="f388e5a4-14da-4d06-9184-63a5aa4d1ae2" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = [1,2,3,4,5,6,7,8,9,10]

output application/json
---
"collection": customArray filter ((item, index) -> 
	item /2 >= 4
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Filter an Object and Return only the Matching Items" doc:id="3f99f3da-b46a-4165-9682-7a8994774490" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"0": "Mulesoft",
	"1": "Course",
	"2": "Fundamentals",
	"3": "Udemy"
}
output application/json
---
{
	"collection": customObj filterObject ((value, key) ->
		sizeOf(value) > 6 and (key contains 2)
	)
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveSelectorsOverObjects" doc:id="ae944f8f-6257-4b4e-9a4a-1cda22113ae6" >
		<ee:transform doc:name="Single Value Selector Over an Object" doc:id="362bfe40-a4bf-4934-909d-c027b89f85f6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name": "John"
		},
		"person":{
			"name": "Leo"
		},
		"person":{
			"name": "Joana"
		},
		"person":{
			"name": "Juiz"
		}
	}
}

output application/json
---

/* Array with only one value */

customObj.people.person
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Multiple-Value Selector Over an Object" doc:id="84754ae3-a19f-4801-baf2-c2245ee8e3ca" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name": "John"
		},
		"person":{
			"name": "Leo"
		},
		"person":{
			"name": "Joana"
		},
		"person":{
			"name": "Juiz"
		}
	}
}

output application/json
---
/* Array with all values */
/* Whose key matches the expression */

customObj.people.*person
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Descendant-Value Selector Over an Object" doc:id="c2e48b1d-7fa9-463a-a847-683c831ec1b6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name": "John",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Leo",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Joana",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Juiz",
			"address": {
				"name": "Adress1"
			}
		}
	}
}

output application/json
---
/* Retrieve values of all matching key-value  */
/* Pairs in the sub-tree under the selected context */

customObj.people..name

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Key-Value Pair Selector Over an Object" doc:id="893e83df-7768-47b6-a60f-1f05b39f92b6" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name": "John",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Leo",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Joana",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Juiz",
			"address": {
				"name": "Adress1"
			}
		}
	}
}

output application/json
---
/* &: retorna o valor e chave dos correspondidos */

customObj.people.*person.name
++ 
customObj.people.*person.&name
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Index Selector Over an Object" doc:id="cf88fa0e-27c0-4106-86f9-00accde4fd96" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people":{
		"person":{
			"name": "John",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Leo",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Joana",
			"address": {
				"name": "Adress1"
			}
		},
		"person":{
			"name": "Juiz",
			"address": {
				"name": "Adress1"
			}
		}
	}
}

output application/json
---
/* retorna o valor do index */

customObj.people[1]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveSelectorOverStrings" doc:id="474fdc87-2ca9-489b-b721-5ea01b758269" >
		<ee:transform doc:name="Index Selector Over String" doc:id="b550e4c5-14f2-496e-a3ed-3352217e4fb7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customString = "Mulesoft"

output application/json
---

customString
++" <- Sem index/Com index -> " ++
customString[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Range Selector Over String" doc:id="dcb48e03-d166-40ef-acb1-004583a91701" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customString = "Mulesoft"

output application/json
---
/* Limit the output to the selected range */

customString[0 to 3]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveLambdaBasics" doc:id="ebc3b42e-b855-4781-afbc-be307c20ed8f" >
		<http:listener doc:name="HTTP POST" doc:id="f3cab87d-c6f4-4adc-9a5a-0a1683b2c45b" path="/lambdas" config-ref="HTTP_Listener_config"/>
		<ee:transform doc:name="Declare and Invoke a Function" doc:id="8d4c5d84-d6d6-4709-9176-46c4f89c237d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

fun createString(obj) = {
	description: obj.field1 ++ " " ++ obj.field2 ++ " " ++ obj.field3
} 

output application/json
---
{
"root": createString(payload)
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="7437f684-55eb-4171-9fab-c0fd8bfa5a8d" message="#[payload]"/>
		<ee:transform doc:name="Use Named Parameters in Lambda" doc:id="eaf7517a-19bd-4dcf-925c-3520e1b09d95" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = [1,2,3,4,5]

output application/json
---
{
	"collection": customArray map ((number) ->
		(number * 100)
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="8b438764-3272-4b18-9ee2-c62ff3b0698f" message="#[payload]"/>
		<ee:transform doc:name="Use Lambda Default Argument Values" doc:id="90612783-a95f-4955-ac69-f7f4b0b9fc12" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customArray = ["mule","course","Fund"]
output application/json
---
/* $$: Index, $: Value */
{
	"collection": customArray map (
		"$$" : $
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveLambdasIntermediate" doc:id="d7f18e7c-d1e3-4efe-bb83-a91b635daba8" >
		<ee:transform doc:name="Maps and Merges Fields from Items in Separated Arrays" doc:id="88097c7b-d771-4c04-a1c1-fce2411ee72b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var books = [
	{
		bookId: 101,
		title: "Mule Course",
		"price": "20.00"
	},
	{
		bookId: 102,
		title: "Mule Not Course",
		"price": "0.00"
	},
	{
		bookId: 103,
		title: "Mule Intro",
		"price": "200.00"
	},
	{
		bookId: 104,
		title: "Mule essentials",
		"price": "2000.00"
	},
]

var authors = [
	{
		bookId: 101,
		author: "Ipy"
	},
	{
		bookId: 102,
		author: "Leonardo"
	},
	{
		bookId: 103,
		author: "Leo"
	},
	{
		bookId: 104,
		author: "Iplinsky"
	},
]

output application/json
---
// parei no video 29 aos 6:35s
{
	"booksResult": books map ((item, index) ->
		// create dynamic variables
		
		using (id = item.bookId) {
			"id": id,
			"topic": item.title,
			"cost": item.price,
			// cria variaveis dinamicas
			(authors filter ($.*bookId contains id) map(item) ->
				{
					// &.bookId refers the author array
					"author": item.author
				}
			)

		}
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
